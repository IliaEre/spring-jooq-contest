/*
 * This file is generated by jOOQ.
 */
package org.jooq.epam.contest.public_.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.epam.contest.public_.tables.Description;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DescriptionRecord extends UpdatableRecordImpl<DescriptionRecord> implements Record3<Long, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.description.id</code>.
     */
    public DescriptionRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.description.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.description.product_id</code>.
     */
    public DescriptionRecord setProductId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.description.product_id</code>.
     */
    public Integer getProductId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.description.descr</code>.
     */
    public DescriptionRecord setDescr(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.description.descr</code>.
     */
    public Integer getDescr() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Description.DESCRIPTION.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Description.DESCRIPTION.PRODUCT_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Description.DESCRIPTION.DESCR;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getProductId();
    }

    @Override
    public Integer component3() {
        return getDescr();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getProductId();
    }

    @Override
    public Integer value3() {
        return getDescr();
    }

    @Override
    public DescriptionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DescriptionRecord value2(Integer value) {
        setProductId(value);
        return this;
    }

    @Override
    public DescriptionRecord value3(Integer value) {
        setDescr(value);
        return this;
    }

    @Override
    public DescriptionRecord values(Long value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DescriptionRecord
     */
    public DescriptionRecord() {
        super(Description.DESCRIPTION);
    }

    /**
     * Create a detached, initialised DescriptionRecord
     */
    public DescriptionRecord(Long id, Integer productId, Integer descr) {
        super(Description.DESCRIPTION);

        setId(id);
        setProductId(productId);
        setDescr(descr);
    }

    /**
     * Create a detached, initialised DescriptionRecord
     */
    public DescriptionRecord(org.jooq.epam.contest.public_.tables.pojos.Description value) {
        super(Description.DESCRIPTION);

        if (value != null) {
            setId(value.getId());
            setProductId(value.getProductId());
            setDescr(value.getDescr());
        }
    }
}
